{"version":3,"file":"static/js/783.3f6606a2.chunk.js","mappings":"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","sources":["redux/selectors.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/FilterComponent.jsx","pages/ContactsPage.jsx"],"sourcesContent":["//selector.jsx\nimport { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectFilter = state => state.filter.filter;\n\n export const selectContact = state => state.contact.contacts.items;\n\nexport const selectIsLoading = state => state.contact.contacts.isLoading;\n\nexport const selectError = state => state.contact.contacts.error;\n\n  export const selectVisibleContacts = createSelector(\n[ selectContact, selectFilter],\n  (items, filter) => {\n     console.log('items', items);\n     return items.filter(contact => contact.name.toLowerCase()\n    .includes(filter.toLowerCase()))\n }\n)\n","import { useState } from 'react';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { addContact } from '../../redux/operation';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport { selectContact } from '../../redux/selectors';\n\nconst FormWrapper = styled.form`\n  display: flex;\n  flex-direction: column;\n  max-width: 300px;\n  margin: 0 auto;\n`;\n\nconst Label = styled.label`\n  font-weight: bold;\n  margin-bottom: 8px;\n`;\n\nconst Input = styled.input`\n  padding: 8px;\n  margin-bottom: 16px;\n`;\n\nconst Button = styled.button`\n  background-color: #4caf50;\n  color: #fff;\n  border: none;\n  padding: 10px;\n  cursor: pointer;\n  border-radius: 4px;\n\n  &:hover {\n    background-color: #45a049;\n  }\n`;\n\nconst ContactsForm = styled.div`\n  margin-top: 20px;\n`;\n\nconst ContactsItem = styled.h1`\n  font-size: 20px;\n  font-weight: bold;\n`;\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContact);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const ifContactExist = contacts => {\n    return contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n  };\n\n  const handleChange = e => {\n    const { value, name } = e.target;\n    if (name === 'name') {\n      setName(value);\n    } else if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (ifContactExist(contacts)) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n    const contact = { id: nanoid(), name, number };\n    dispatch(addContact(contact));\n    reset();\n  };\n\n  return (\n    <>\n      <FormWrapper onSubmit={handleSubmit}>\n        <Label htmlFor=\"nameInputId\">Name</Label>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          required\n        />\n        <Label htmlFor=\"numberInputId\">Number</Label>\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n        />\n        <Button type=\"submit\">Add contact</Button>\n      </FormWrapper>\n      <ContactsForm>\n        <ContactsItem>Contacts</ContactsItem>\n      </ContactsForm>\n    </>\n  );\n};\n","// ContactList.js\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from '../../redux/operation';\nimport styled from 'styled-components';\nimport { selectVisibleContacts } from '../../redux/selectors';\n\nconst ItemsList = styled.ul`\n  list-style: none;\n  padding: 0;\n`;\n\nconst ContactItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid #ccc;\n  padding: 10px;\n`;\n\nconst DeleteButton = styled.button`\n  background-color: #dc3545;\n  color: #fff;\n  border: none;\n  padding: 8px;\n  cursor: pointer;\n  border-radius: 4px;\n\n  &:hover {\n    background-color: #c82333;\n  }\n`;\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const visibleContact = useSelector(selectVisibleContacts);\n\n  return (\n    <ItemsList>\n      {visibleContact.map(el => (\n        <ContactItem key={el.id}>\n          <span>{el.name}</span>\n          <span>{el.number}</span>\n          <DeleteButton\n            type=\"button\"\n            onClick={() => dispatch(deleteContact(el.id))}\n          >\n            Delete\n          </DeleteButton>\n        </ContactItem>\n      ))}\n    </ItemsList>\n  );\n};\n","// Filter.js\nimport { useDispatch, useSelector } from 'react-redux';\nimport { onChangeFilter } from '../../redux/filterSlice';\nimport styled from 'styled-components';\nimport { selectFilter } from '../../redux/selectors';\n\nconst FilterContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 20px;\n`;\n\nconst FilterLabel = styled.label`\n  font-size: 16px;\n  font-weight: bold;\n  margin-bottom: 8px;\n  color: #333;\n`;\n\nconst InputFilter = styled.input`\n  padding: 10px;\n  font-size: 14px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  outline: none;\n\n  &:focus {\n    border-color: #4caf50;\n  }\n`;\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const handleFilterChange = e => {\n    dispatch(onChangeFilter(e.target.value));\n  };\n\n  return (\n    <FilterContainer>\n      <FilterLabel>Find contacts by name</FilterLabel>\n      <InputFilter type=\"text\" value={filter} onChange={handleFilterChange} />\n    </FilterContainer>\n  );\n};\n","import { ContactForm } from '../components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/FilterComponent';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from '../redux/operation';\nimport { selectError, selectIsLoading } from '../redux/selectors';\nconst styles = {\n  loadTitle: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n};\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <>\n      <ContactForm />\n      <Filter />\n      {isLoading && !error && <b style={styles.loadTitle}>Loading...</b>}\n      <ContactList />\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["selectFilter","state","filter","selectContact","contact","contacts","items","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","console","log","name","toLowerCase","includes","FormWrapper","styled","_templateObject","_taggedTemplateLiteral","Label","_templateObject2","Input","_templateObject3","Button","_templateObject4","ContactsForm","_templateObject5","ContactsItem","_templateObject6","ContactForm","dispatch","useDispatch","useSelector","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","number","setNumber","handleChange","e","_e$target","target","value","_jsxs","_Fragment","children","onSubmit","preventDefault","some","ifContactExist","alert","concat","id","nanoid","addContact","_jsx","htmlFor","type","onChange","required","ItemsList","ContactItem","DeleteButton","ContactList","visibleContact","map","el","onClick","deleteContact","FilterContainer","FilterLabel","InputFilter","Filter","onChangeFilter","styles","loadTitle","display","alignItems","justifyContent","useEffect","fetchContacts","style"],"sourceRoot":""}